import { Permission } from "@/types/permissions";
import { toast } from "@/hooks/use-toast";

const isAndroidApp = () => {
  const userAgent = navigator.userAgent;
  const isAndroid = /Android/i.test(userAgent);
  const isCapacitor = !!(window as any).Capacitor;
  const isWebView = /wv|WebView/i.test(userAgent);
  const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
  
  return isAndroid && (isCapacitor || isWebView || isStandalone);
};

// Fun√ß√£o espec√≠fica para solicitar permiss√£o no Android
const requestAndroidNotificationPermission = async (): Promise<Permission['status']> => {
  console.log('üì± Solicitando permiss√£o de notifica√ß√£o no Android...');
  
  try {
    // Para Android, for√ßa a solicita√ß√£o mesmo se o status for 'default'
    const permission = await Notification.requestPermission();
    console.log('üì± Resposta da solicita√ß√£o Android:', permission);
    
    if (permission === 'granted') {
      // Testa imediatamente com uma notifica√ß√£o
      setTimeout(() => {
        try {
          const testNotification = new Notification('üéâ TDAHFOCUS - Permiss√£o Concedida!', {
            body: 'Agora voc√™ receber√° notifica√ß√µes na barra de notifica√ß√µes do Android! üì±üîî',
            icon: '/favicon.ico',
            tag: 'android-welcome',
            silent: false,
            requireInteraction: true
          });
          
          console.log('üì± Notifica√ß√£o de teste criada para Android');
          
          setTimeout(() => {
            testNotification.close();
          }, 6000);
        } catch (error) {
          console.error('‚ùå Erro ao criar notifica√ß√£o de teste:', error);
        }
      }, 1000);
      
      return 'granted';
    } else if (permission === 'denied') {
      return 'denied';
    } else {
      return 'prompt';
    }
  } catch (error) {
    console.error('‚ùå Erro ao solicitar permiss√£o no Android:', error);
    return 'denied';
  }
};

export const requestPermission = async (permissionId: string): Promise<Permission['status']> => {
  console.log(`üîî Solicitando permiss√£o: ${permissionId}`);
  
  try {
    let newStatus: Permission['status'] = 'denied';

    switch (permissionId) {
      case 'notifications':
        const isApp = isAndroidApp();
        console.log('üì± √â aplicativo Android:', isApp);
        
        // Verifica se a API est√° dispon√≠vel
        if (!('Notification' in window)) {
          console.log('‚ùå API de Notification n√£o dispon√≠vel');
          toast({
            title: "‚ùå Notifica√ß√µes n√£o suportadas",
            description: "Este dispositivo n√£o suporta notifica√ß√µes do sistema.",
            variant: "destructive"
          });
          return 'denied';
        }

        console.log('‚úÖ API de Notification dispon√≠vel, status atual:', Notification.permission);
        
        // Para navegadores (n√£o apps), verifica HTTPS
        if (!isApp) {
          const isSecure = location.protocol === 'https:' || 
                          location.hostname === 'localhost' || 
                          location.hostname === '127.0.0.1';
          
          if (!isSecure) {
            toast({
              title: "‚ùå Contexto inseguro",
              description: "Notifica√ß√µes requerem HTTPS no navegador. Use um app ou HTTPS.",
              variant: "destructive"
            });
            return 'denied';
          }
        }
        
        // Se j√° foi negada anteriormente, orienta o usu√°rio
        if (Notification.permission === 'denied') {
          toast({
            title: "üîí Notifica√ß√µes bloqueadas",
            description: isApp ? 
              "V√° em Configura√ß√µes > Apps > TDAHFOCUS > Notifica√ß√µes > Permitir" :
              "V√° nas configura√ß√µes do navegador > Notifica√ß√µes > Permitir para este site",
            variant: "destructive"
          });
          return 'denied';
        }

        // Se j√° est√° concedida, testa se realmente funciona
        if (Notification.permission === 'granted') {
          toast({
            title: "‚úÖ Notifica√ß√µes j√° ativas!",
            description: "Testando se as notifica√ß√µes aparecem na barra do Android...",
          });
          
          // Testa com uma notifica√ß√£o imediata para Android
          setTimeout(() => {
            try {
              const testNotification = new Notification('üéØ TDAHFOCUS - Teste', {
                body: 'Se voc√™ v√™ esta notifica√ß√£o na barra do Android, est√° funcionando! üì±‚ú®',
                icon: '/favicon.ico',
                tag: 'android-test',
                silent: false,
                requireInteraction: true
              });
              
              setTimeout(() => {
                testNotification.close();
              }, 5000);
            } catch (error) {
              console.error('‚ùå Erro ao criar notifica√ß√£o de teste:', error);
            }
          }, 1000);
          
          return 'granted';
        }

        // Solicita permiss√£o (especialmente importante para Android)
        if (Notification.permission === 'default') {
          console.log('üì± For√ßando solicita√ß√£o de permiss√£o para Android...');
          
          if (isApp) {
            newStatus = await requestAndroidNotificationPermission();
          } else {
            try {
              const permission = await Notification.requestPermission();
              console.log('üåê Resultado da solicita√ß√£o no navegador:', permission);
              
              if (permission === 'granted') {
                toast({
                  title: "‚úÖ Notifica√ß√µes ativadas!",
                  description: "Agora voc√™ receber√° lembretes para suas tarefas.",
                });
                newStatus = 'granted';
              } else if (permission === 'denied') {
                toast({
                  title: "‚ùå Notifica√ß√µes negadas",
                  description: "Voc√™ negou as notifica√ß√µes. Ative nas configura√ß√µes do navegador.",
                  variant: "destructive"
                });
                newStatus = 'denied';
              } else {
                newStatus = 'prompt';
              }
            } catch (error) {
              console.error('‚ùå Erro ao solicitar permiss√£o no navegador:', error);
              newStatus = 'denied';
            }
          }
          
          // Se conseguiu a permiss√£o, mostra feedback espec√≠fico para Android
          if (newStatus === 'granted' && isApp) {
            toast({
              title: "üéâ Sucesso no Android!",
              description: "Notifica√ß√µes ativadas! Voc√™ ver√° os lembretes na barra de notifica√ß√µes do seu Android! üì±üîî",
            });
          } else if (newStatus === 'denied' && isApp) {
            toast({
              title: "‚ö†Ô∏è Permiss√£o necess√°ria",
              description: "Para receber notifica√ß√µes, v√° em: Configura√ß√µes > Apps > TDAHFOCUS > Notifica√ß√µes > Permitir",
              variant: "destructive"
            });
          }
        }
        break;

      case 'storage':
        try {
          localStorage.setItem('android-permission-test', 'test');
          localStorage.removeItem('android-permission-test');
          newStatus = 'granted';
          toast({
            title: "‚úÖ Armazenamento dispon√≠vel!",
            description: "Seus dados ser√£o salvos localmente no dispositivo.",
          });
        } catch (error) {
          console.error('‚ùå Erro no localStorage:', error);
          newStatus = 'denied';
          toast({
            title: "‚ùå Erro no armazenamento",
            description: "N√£o foi poss√≠vel acessar o armazenamento local.",
            variant: "destructive"
          });
        }
        break;

      case 'wakeLock':
        if ('wakeLock' in navigator) {
          try {
            const wakeLock = await (navigator as any).wakeLock.request('screen');
            await wakeLock.release();
            newStatus = 'granted';
            toast({
              title: "‚úÖ Controle de tela dispon√≠vel!",
              description: "O app pode manter a tela ativa durante sess√µes de foco.",
            });
          } catch (error) {
            console.error('‚ùå Erro no wake lock:', error);
            newStatus = 'denied';
            toast({
              title: "‚ùå N√£o foi poss√≠vel ativar",
              description: "O controle de tela n√£o est√° dispon√≠vel neste momento.",
              variant: "destructive"
            });
          }
        } else {
          newStatus = 'denied';
          toast({
            title: "‚ùå N√£o suportado",
            description: "Controle de tela n√£o √© suportado neste dispositivo.",
            variant: "destructive"
          });
        }
        break;
    }

    return newStatus;

  } catch (error) {
    console.error(`‚ùå Erro ao solicitar permiss√£o ${permissionId}:`, error);
    toast({
      title: "‚ùå Erro",
      description: "N√£o foi poss√≠vel solicitar a permiss√£o.",
      variant: "destructive"
    });
    return 'denied';
  }
};

export const requestAllPermissions = async (
  permissions: Permission[],
  onPermissionUpdate: (permissionId: string, status: Permission['status']) => void
) => {
  console.log('üîî Solicitando todas as permiss√µes para Android...');
  
  toast({
    title: "üì± Configurando para Android",
    description: "Vamos solicitar as permiss√µes necess√°rias para o funcionamento do app no Android.",
  });
  
  for (const permission of permissions) {
    if (permission.status !== 'granted' && permission.isRequired) {
      console.log(`üîÑ Processando permiss√£o: ${permission.id}`);
      const newStatus = await requestPermission(permission.id);
      onPermissionUpdate(permission.id, newStatus);
      // Pausa entre solicita√ß√µes para Android
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  // Verifica se todas as permiss√µes obrigat√≥rias foram concedidas
  const allGranted = permissions
    .filter(p => p.isRequired)
    .every(p => p.status === 'granted');
    
  if (allGranted) {
    toast({
      title: "üéâ App configurado para Android!",
      description: "Todas as permiss√µes foram concedidas! Seu app est√° pronto para uso no Android. üì±‚ú®",
    });
  } else {
    toast({
      title: "‚ö†Ô∏è Algumas permiss√µes pendentes",
      description: "Para funcionar completamente no Android, conceda todas as permiss√µes em Configura√ß√µes > Apps > TDAHFOCUS.",
      variant: "destructive"
    });
  }
};
