import {
  requestLocalNotificationPermission,
  testLocalNotification,
  initializeLocalNotifications,
  isNativePlatform
} from '@/utils/localNotifications';
import { playNotificationSound, initializeAudio } from '@/utils/audioNotifications';
import { toast } from '@/hooks/use-toast';
import { Reminder } from '@/types/reminder';

// Fun√ß√£o para mostrar notifica√ß√£o
export const showNotification = (reminder: Reminder) => {
  console.log('üîî Mostrando notifica√ß√£o motivacional:', reminder.title);
  
  playNotificationSound();

  if (!isNativePlatform()) {
    // Estamos em ambiente Web (PWA ou Desktop), mostrar toast simples
    toast({
      title: `üîî ${reminder.title}`,
      description: reminder.description || '√â hora do seu foco! üéØ',
    });
    return;
  }

  // Se for app nativo, o plugin de notifica√ß√£o local cuidar√° da exibi√ß√£o
  console.log('üì± App nativo: notifica√ß√£o ser√° exibida pelo sistema');
};

// Verifica lembretes (somente para Web)
export const checkReminders = (reminders: Reminder[]) => {
  if (isNativePlatform()) return;

  const now = new Date();
  const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
  console.log('üïê Verificando lembretes para:', currentTime);
  
  reminders.forEach(reminder => {
    if (reminder.isActive && reminder.time === currentTime) {
      showNotification(reminder);
    }
  });
};

// Solicita permiss√£o para notifica√ß√£o
export const requestNotificationPermission = async () => {
  console.log('üîî Solicitando permiss√£o de notifica√ß√£o...');
  initializeAudio();

  let granted = false;

  if (isNativePlatform()) {
    granted = await requestLocalNotificationPermission();
  } else {
    // Web n√£o precisa de permiss√£o especial para toast
    granted = true;
  }

  if (granted && !isNativePlatform()) {
    toast({
      title: "üéâ Notifica√ß√µes ativadas!",
      description: "Voc√™ receber√° lembretes via toast. Para alertas reais, use o app nativo.",
    });
  }

  return granted;
};

// Testa notifica√ß√£o local (apenas no app)
export const testBalloonNotification = async () => {
  console.log('üß™ Testando notifica√ß√£o local...');

  if (!isNativePlatform()) {
    toast({
      title: "‚ö†Ô∏è Apenas no app nativo",
      description: "Notifica√ß√µes locais s√≥ funcionam no app Android/iOS instalado",
      variant: "destructive"
    });
    return false;
  }

  return await testLocalNotification();
};

// Inicia o sistema de lembretes
export const startReminderSystem = async (reminders: Reminder[]) => {
  console.log('üöÄ Iniciando sistema de lembretes motivacionais...');
  initializeAudio();

  if (isNativePlatform()) {
    console.log('üì± App nativo: configurando notifica√ß√µes locais...');
    const initialized = await initializeLocalNotifications();

    if (initialized) {
      toast({
        title: "üéâ Sistema ativado!",
        description: "Notifica√ß√µes locais configuradas! üì±üîî",
      });
    }

    return () => {
      console.log('‚èπÔ∏è Sistema de notifica√ß√µes locais n√£o precisa ser parado');
    };
  }

  // Web: Verifica√ß√£o manual
  console.log('üåê App web: usando verifica√ß√£o manual a cada minuto');
  checkReminders(reminders);
  const interval = setInterval(() => checkReminders(reminders), 60000);

  return () => {
    console.log('‚èπÔ∏è Parando sistema de lembretes...');
    clearInterval(interval);
  };
};
