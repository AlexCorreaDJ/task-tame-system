
import { LocalNotifications } from '@capacitor/local-notifications';
import { Capacitor } from '@capacitor/core';
import { toast } from '@/hooks/use-toast';

// Verifica se estamos no ambiente nativo
export const isNativePlatform = () => {
  return Capacitor.isNativePlatform();
};

/**
 * Solicita permiss√£o para notifica√ß√µes locais
 */
export const requestLocalNotificationPermission = async (): Promise<boolean> => {
  if (!isNativePlatform()) {
    console.log('‚ö†Ô∏è Notifica√ß√µes locais s√≥ funcionam no app nativo');
    return false;
  }

  try {
    console.log('üì± Solicitando permiss√£o para notifica√ß√µes locais...');
    
    const permission = await LocalNotifications.requestPermissions();
    console.log('üìã Resultado da permiss√£o:', permission);
    
    if (permission.display === 'granted') {
      console.log('‚úÖ Permiss√£o para notifica√ß√µes locais concedida');
      
      // Cria canal de notifica√ß√£o para Android
      await LocalNotifications.createChannel({
        id: 'tdahfocus-local-reminders',
        name: 'Lembretes TDAHFOCUS',
        description: 'Lembretes pontuais que aparecem em bal√£o',
        importance: 5, // IMPORTANCE_HIGH
        visibility: 1, // VISIBILITY_PUBLIC
        sound: 'default',
        vibration: true,
        lights: true,
        lightColor: '#4F46E5',
      });
      
      toast({
        title: "‚úÖ Permiss√£o concedida!",
        description: "Notifica√ß√µes locais ativadas com sucesso! üîî",
      });
      
      return true;
    } else {
      console.log('‚ùå Permiss√£o para notifica√ß√µes locais negada');
      toast({
        title: "‚ùå Permiss√£o negada",
        description: "Ative as notifica√ß√µes nas configura√ß√µes do Android",
        variant: "destructive"
      });
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro ao solicitar permiss√£o:', error);
    toast({
      title: "‚ùå Erro na permiss√£o",
      description: "N√£o foi poss√≠vel solicitar permiss√£o para notifica√ß√µes",
      variant: "destructive"
    });
    return false;
  }
};

/**
 * Agenda um lembrete pontual usando notifica√ß√µes locais
 */
export const scheduleLocalReminder = async (
  title: string,
  body: string,
  scheduledTime: Date,
  extraData?: any
): Promise<boolean> => {
  if (!isNativePlatform()) {
    console.log('‚ö†Ô∏è Agendamento local s√≥ funciona no app nativo');
    return false;
  }

  try {
    const id = Date.now();
    console.log(`üìÖ Agendando lembrete local "${title}" para ${scheduledTime.toLocaleString()}`);
    
    await LocalNotifications.schedule({
      notifications: [
        {
          id,
          title: `üéØ ${title}`,
          body: body || '√â hora do seu foco! üöÄ',
          schedule: { at: scheduledTime },
          sound: 'default',
          channelId: 'tdahfocus-local-reminders',
          smallIcon: 'ic_notification',
          iconColor: '#4F46E5',
          extra: {
            ...extraData,
            type: 'local-reminder',
            scheduledAt: scheduledTime.toISOString(),
            createdAt: new Date().toISOString()
          },
          actionTypeId: 'REMINDER_ACTION',
          attachments: undefined
        }
      ]
    });
    
    console.log(`‚úÖ Lembrete local "${title}" agendado com sucesso! ID: ${id}`);
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao agendar lembrete local:', error);
    return false;
  }
};

/**
 * Agenda lembrete para daqui a X minutos (para testes)
 */
export const scheduleReminderInMinutes = async (
  title: string,
  body: string,
  minutes: number,
  extraData?: any
): Promise<boolean> => {
  const scheduledTime = new Date(Date.now() + minutes * 60 * 1000);
  return await scheduleLocalReminder(title, body, scheduledTime, extraData);
};

/**
 * Agenda lembrete para hor√°rio espec√≠fico hoje
 */
export const scheduleReminderForToday = async (
  title: string,
  body: string,
  timeString: string, // formato "HH:MM"
  extraData?: any
): Promise<boolean> => {
  const [hours, minutes] = timeString.split(':').map(Number);
  const scheduledTime = new Date();
  scheduledTime.setHours(hours, minutes, 0, 0);
  
  // Se o hor√°rio j√° passou hoje, agenda para amanh√£
  if (scheduledTime <= new Date()) {
    scheduledTime.setDate(scheduledTime.getDate() + 1);
  }
  
  return await scheduleLocalReminder(title, body, scheduledTime, extraData);
};

/**
 * Testa notifica√ß√£o local (aparece em 10 segundos)
 */
export const testLocalNotification = async (): Promise<boolean> => {
  console.log('üß™ Testando notifica√ß√£o local em 10 segundos...');
  
  const success = await scheduleReminderInMinutes(
    'üß™ Teste TDAHFOCUS',
    'Esta √© uma notifica√ß√£o de teste local! Se voc√™ est√° vendo isso, as notifica√ß√µes locais est√£o funcionando perfeitamente! üéâ',
    0.17, // ~10 segundos
    { type: 'test', timestamp: Date.now() }
  );
  
  if (success) {
    toast({
      title: "üß™ Teste agendado!",
      description: "Notifica√ß√£o aparecer√° em ~10 segundos",
    });
  } else {
    toast({
      title: "‚ùå Falha no teste",
      description: "N√£o foi poss√≠vel agendar a notifica√ß√£o de teste",
      variant: "destructive"
    });
  }
  
  return success;
};

/**
 * Cancela uma notifica√ß√£o local espec√≠fica
 */
export const cancelLocalNotification = async (notificationId: number): Promise<boolean> => {
  if (!isNativePlatform()) {
    return false;
  }

  try {
    await LocalNotifications.cancel({
      notifications: [{ id: notificationId }]
    });
    console.log(`üóëÔ∏è Notifica√ß√£o local ${notificationId} cancelada`);
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao cancelar notifica√ß√£o:', error);
    return false;
  }
};

/**
 * Obt√©m todas as notifica√ß√µes pendentes
 */
export const getPendingLocalNotifications = async () => {
  if (!isNativePlatform()) {
    return [];
  }

  try {
    const pending = await LocalNotifications.getPending();
    console.log(`üìã ${pending.notifications.length} notifica√ß√µes locais pendentes`);
    return pending.notifications;
  } catch (error) {
    console.error('‚ùå Erro ao obter notifica√ß√µes pendentes:', error);
    return [];
  }
};

/**
 * Inicializa o sistema de notifica√ß√µes locais
 */
export const initializeLocalNotifications = async (): Promise<boolean> => {
  if (!isNativePlatform()) {
    console.log('‚ö†Ô∏è Sistema de notifica√ß√µes locais s√≥ funciona no app nativo');
    return false;
  }

  try {
    // Listener para quando o usu√°rio tocar na notifica√ß√£o
    LocalNotifications.addListener('localNotificationActionPerformed', (notification) => {
      console.log('üëÜ Usu√°rio tocou na notifica√ß√£o local:', notification);
      
      toast({
        title: "üì± Notifica√ß√£o aberta",
        description: notification.notification.title || "Lembrete do TDAHFOCUS",
      });
    });
    
    console.log('‚úÖ Sistema de notifica√ß√µes locais inicializado');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao inicializar notifica√ß√µes locais:', error);
    return false;
  }
};
