import {
  LocalNotifications,
  PermissionStatus,
  LocalNotification,
  Schedule,
} from '@capacitor/local-notifications';
import { Capacitor } from '@capacitor/core';

export const isNativePlatform = (): boolean => {
  return Capacitor.isNativePlatform();
};

export const requestLocalNotificationPermission = async (): Promise<boolean> => {
  try {
    console.log('üîî Solicitando permiss√£o para notifica√ß√µes...');
    
    const permission: PermissionStatus = await LocalNotifications.requestPermissions();
    console.log('üì± Resultado da permiss√£o:', permission);
    
    if (permission.display === 'granted') {
      console.log('‚úÖ Permiss√£o concedida!');
      
      // Cria canal de notifica√ß√£o para Android
      if (Capacitor.getPlatform() === 'android') {
        await LocalNotifications.createChannel({
          id: 'tdahfocus-reminders',
          name: 'Lembretes TDAHFOCUS',
          description: 'Lembretes motivacionais para manter seu foco',
          importance: 5, // IMPORTANCE_HIGH
          visibility: 1, // VISIBILITY_PUBLIC
          sound: 'default',
          vibration: true,
          lights: true,
          lightColor: '#4F46E5'
        });
        console.log('üì± Canal de notifica√ß√£o criado para Android');
      }
      
      return true;
    }
    
    console.log('‚ùå Permiss√£o negada');
    return false;
  } catch (error) {
    console.error('‚ùå Erro ao solicitar permiss√£o:', error);
    return false;
  }
};

export const scheduleLocalNotification = async (
  notification: LocalNotification,
  schedule?: Schedule
): Promise<void> => {
  try {
    console.log('üìÖ Agendando notifica√ß√£o:', {
      id: notification.id,
      title: notification.title,
      schedule: schedule
    });
    
    await LocalNotifications.schedule({
      notifications: [
        {
          id: notification.id,
          title: notification.title,
          body: notification.body,
          sound: 'default', // For√ßa som padr√£o
          schedule: schedule || undefined,
          extra: notification.extra || undefined,
          smallIcon: 'ic_notification',
          iconColor: '#4F46E5',
          channelId: 'tdahfocus-reminders', // Usa o canal criado
          actionTypeId: 'REMINDER_ACTION',
          attachments: undefined,
        },
      ],
    });
    
    console.log('‚úÖ Notifica√ß√£o agendada com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro ao agendar notifica√ß√£o:', error);
    throw error;
  }
};

export const showLocalNotification = async (
  notification: LocalNotification
): Promise<void> => {
  await scheduleLocalNotification(notification);
};

export const cancelLocalNotification = async (id: number): Promise<void> => {
  try {
    console.log(`üóëÔ∏è Cancelando notifica√ß√£o ${id}`);
    await LocalNotifications.cancel({ notifications: [{ id }] });
    console.log(`‚úÖ Notifica√ß√£o ${id} cancelada`);
  } catch (error) {
    console.error(`‚ùå Erro ao cancelar notifica√ß√£o ${id}:`, error);
  }
};

export const cancelAllLocalNotifications = async (): Promise<void> => {
  try {
    const pending = await LocalNotifications.getPending();
    console.log(`üóëÔ∏è Cancelando ${pending.notifications.length} notifica√ß√µes pendentes`);
    
    if (pending.notifications.length > 0) {
      await LocalNotifications.cancel({ notifications: pending.notifications });
      console.log('‚úÖ Todas as notifica√ß√µes canceladas');
    }
  } catch (error) {
    console.error('‚ùå Erro ao cancelar todas as notifica√ß√µes:', error);
  }
};

export const getScheduledLocalNotifications = async (): Promise<LocalNotification[]> => {
  try {
    const result = await LocalNotifications.getPending();
    console.log(`üìã ${result.notifications.length} notifica√ß√µes agendadas`);
    return result.notifications;
  } catch (error) {
    console.error('‚ùå Erro ao buscar notifica√ß√µes agendadas:', error);
    return [];
  }
};

export const testBalloonNotification = async (): Promise<boolean> => {
  try {
    console.log('üß™ Testando notifica√ß√£o...');
    
    await showLocalNotification({
      id: 999999, // ID √∫nico para teste
      title: "üß™ Teste TDAHFOCUS",
      body: "Se voc√™ est√° vendo isso, as notifica√ß√µes est√£o funcionando! üéâüì±",
      sound: 'default',
      channelId: 'tdahfocus-reminders',
      smallIcon: 'ic_notification',
      iconColor: '#4F46E5'
    });
    
    console.log('‚úÖ Notifica√ß√£o de teste enviada');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao testar notifica√ß√£o:', error);
    return false;
  }
};

export const initializeLocalNotifications = async (): Promise<boolean> => {
  if (!isNativePlatform()) {
    console.log('üåê N√£o √© app nativo, pulando inicializa√ß√£o de notifica√ß√µes locais');
    return false;
  }

  try {
    console.log('üöÄ Inicializando sistema de notifica√ß√µes locais...');
    
    const permission = await requestLocalNotificationPermission();
    if (permission) {
      console.log('‚úÖ Notifica√ß√µes locais inicializadas com sucesso');
      
      // Configura listeners para notifica√ß√µes
      LocalNotifications.addListener('localNotificationActionPerformed', (notification) => {
        console.log('üëÜ Usu√°rio tocou na notifica√ß√£o:', notification);
      });
      
      return true;
    } else {
      console.log('‚ùå Permiss√£o de notifica√ß√£o negada');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro ao inicializar notifica√ß√µes locais:', error);
    return false;
  }
};

export const scheduleReminderForToday = async (
  title: string,
  body: string,
  time: string, // Formato HH:MM
  extra?: any,
  notificationId?: number // Par√¢metro opcional para ID da notifica√ß√£o
): Promise<boolean> => {
  try {
    console.log(`‚è∞ Agendando lembrete "${title}" para ${time}`);
    
    const [hours, minutes] = time.split(':').map(Number);

    if (isNaN(hours) || isNaN(minutes)) {
      throw new Error(`Formato inv√°lido para hor√°rio: ${time}`);
    }

    const now = new Date();
    const scheduleDate = new Date();
    scheduleDate.setHours(hours, minutes, 0, 0);

    // Se o hor√°rio j√° passou hoje, agenda para amanh√£
    if (scheduleDate <= now) {
      scheduleDate.setDate(scheduleDate.getDate() + 1);
      console.log(`‚è∞ Hor√°rio j√° passou hoje, agendando para amanh√£: ${scheduleDate.toLocaleString()}`);
    } else {
      console.log(`‚è∞ Agendando para hoje: ${scheduleDate.toLocaleString()}`);
    }

    const schedule: Schedule = { 
      at: scheduleDate,
      repeats: true, // Repetir diariamente
      every: 'day'
    };

    await scheduleLocalNotification(
      {
        id: notificationId || Date.now(),
        title: `üéØ ${title}`,
        body: body || '√â hora do seu foco! Mantenha a concentra√ß√£o! üöÄ',
        extra: {
          ...extra,
          scheduledTime: time,
          createdAt: new Date().toISOString()
        },
        sound: 'default',
        channelId: 'tdahfocus-reminders',
        smallIcon: 'ic_notification',
        iconColor: '#4F46E5'
      },
      schedule
    );

    console.log(`‚úÖ Lembrete "${title}" agendado para ${scheduleDate.toLocaleString()}`);
    
    // Verifica se foi realmente agendado
    const agendadas = await getScheduledLocalNotifications();
    console.log(`üìã Total de notifica√ß√µes agendadas: ${agendadas.length}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao agendar lembrete:', error);
    return false;
  }
};

// Sistema de verifica√ß√£o manual (backup)
let reminderCheckerStarted = false;
let reminderInterval: NodeJS.Timeout | null = null;

export const startReminderChecker = () => {
  if (reminderCheckerStarted) {
    console.log('‚ö†Ô∏è Sistema de verifica√ß√£o j√° est√° rodando');
    return;
  }
  
  reminderCheckerStarted = true;
  console.log("‚è∞ Iniciando sistema de verifica√ß√£o de lembretes...");

  // Verifica a cada 30 segundos para maior precis√£o
  reminderInterval = setInterval(async () => {
    try {
      const now = new Date();
      const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
      
      // Busca lembretes do localStorage
      const remindersData = localStorage.getItem('reminders');
      if (!remindersData) return;
      
      const reminders = JSON.parse(remindersData);
      
      for (const reminder of reminders) {
        if (reminder.isActive && reminder.time === currentTime) {
          console.log(`üîî Disparando lembrete manual: "${reminder.title}" √†s ${currentTime}`);
          
          // Dispara notifica√ß√£o imediata
          await showLocalNotification({
            id: Date.now() + Math.random() * 1000, // ID √∫nico
            title: `üéØ ${reminder.title}`,
            body: reminder.description || '√â hora do seu foco! Mantenha a concentra√ß√£o! üöÄ',
            sound: 'default',
            channelId: 'tdahfocus-reminders',
            smallIcon: 'ic_notification',
            iconColor: '#4F46E5',
            extra: {
              reminderType: reminder.type,
              reminderId: reminder.id,
              triggeredAt: new Date().toISOString()
            }
          });
        }
      }
    } catch (error) {
      console.error('‚ùå Erro no verificador de lembretes:', error);
    }
  }, 30000); // Verifica a cada 30 segundos
};

export const stopReminderChecker = () => {
  if (reminderInterval) {
    clearInterval(reminderInterval);
    reminderInterval = null;
    reminderCheckerStarted = false;
    console.log('üõë Sistema de verifica√ß√£o de lembretes parado');
  }
};